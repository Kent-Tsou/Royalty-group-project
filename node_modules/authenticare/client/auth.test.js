"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var auth = _interopRequireWildcard(require("./auth"));

var _jwtDecode = _interopRequireDefault(require("./jwtDecode"));

var _tokenStorage = require("./tokenStorage");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

jest.mock('./jwtDecode');
jest.mock('./tokenStorage');
beforeEach(function () {
  return jest.resetModules();
});
describe('isAuthenticated', function () {
  it('returns true if token has not expired', function () {
    _tokenStorage.getToken.mockImplementation(function () {
      return 'test-token';
    });

    _jwtDecode["default"].mockImplementation(function (token) {
      var today = new Date();
      var tomorrow = today.setDate(today.getDate() + 1);
      return {
        exp: tomorrow / 1000 // milliseconds -> seconds

      };
    });

    var result = auth.isAuthenticated();
    expect(result).toBeTruthy();
  });
  it('returns false if token has expired', function () {
    expect.assertions(2); // in case decode is never called

    _tokenStorage.getToken.mockImplementation(function () {
      return 'test-token';
    });

    _tokenStorage.saveToken.mockImplementation(function () {});

    _jwtDecode["default"].mockImplementation(function (token) {
      expect(token).toBe('test-token');
      var today = new Date();
      var yesterday = today.setDate(today.getDate() - 1);
      return {
        exp: yesterday / 1000 // milliseconds -> seconds

      };
    });

    var result = auth.isAuthenticated();
    expect(result).toBeFalsy();
  });
  it('logs off the user if token has expired', function () {
    expect.assertions(2); // in case decode and saveToken are never called

    _tokenStorage.getToken.mockImplementation(function () {
      return 'test-token';
    });

    _tokenStorage.saveToken.mockImplementation(function (token) {
      expect(token).toBeNull();
    });

    _jwtDecode["default"].mockImplementation(function (token) {
      expect(token).toBe('test-token');
      var today = new Date();
      var yesterday = today.setDate(today.getDate() - 1);
      return {
        exp: yesterday / 1000 // milliseconds -> seconds

      };
    });

    auth.isAuthenticated();
  });
  it('returns false if no token is present', function () {
    _tokenStorage.getToken.mockImplementation(function () {}); // no token returned


    var result = auth.isAuthenticated();
    expect(result).toBeFalsy();
  });
});
describe('saveAuthToken', function () {
  it('saves the token and returns a decoded token', function () {
    expect.assertions(3);
    var testToken = 'test-token';

    _tokenStorage.saveToken.mockImplementation(function (token) {
      expect(token).toBe('test-token');
    });

    _jwtDecode["default"].mockImplementation(function (token) {
      expect(token).toBe('test-token');
      return {
        sub: 'token-test'
      };
    });

    expect(auth.saveAuthToken(testToken).sub).toBe('token-test');
  });
});
describe('getDecodedToken', function () {
  it('returns a decoded token when token is present', function () {
    expect.assertions(2);

    _tokenStorage.getToken.mockImplementation(function () {
      return 'test-token';
    });

    _jwtDecode["default"].mockImplementation(function (token) {
      expect(token).toBe('test-token');
      return {
        sub: 'token-test'
      };
    });

    expect(auth.getDecodedToken().sub).toBe('token-test');
  });
  it('returns null if no token is present', function () {
    _tokenStorage.getToken.mockImplementation(function () {});

    expect(auth.getDecodedToken()).toBeNull();
  });
});
describe('getEncodedToken', function () {
  it('returns the encoded token', function () {
    _tokenStorage.getToken.mockImplementation(function () {
      return 'test-token';
    });

    expect(auth.getEncodedToken()).toBe('test-token');
  });
});
describe('logOff', function () {
  it('attempts to save a null token', function () {
    expect.assertions(1);

    _tokenStorage.saveToken.mockImplementation(function (token) {
      expect(token).toBeNull();
    });

    auth.logOff();
  });
});