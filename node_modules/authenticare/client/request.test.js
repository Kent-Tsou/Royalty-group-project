"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var auth = _interopRequireWildcard(require("./auth"));

var _request = _interopRequireDefault(require("./request"));

var _endpoints = require("../endpoints");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

jest.mock('./auth');
describe('the request function', function () {
  it('returns the token when successful', function () {
    expect.assertions(2);
    var mockToken = 'test-token';
    var mockMessage = 'Authentication successful';
    var user = {
      username: 'testuser',
      password: 'testpassword'
    };
    auth.saveAuthToken.mockImplementation(function (token) {
      return {
        token: token,
        message: mockMessage
      };
    });

    function mockConsume() {
      return Promise.resolve({
        body: {
          token: mockToken
        }
      });
    }

    return (0, _request["default"])(_endpoints.signInUrl, user, mockConsume).then(function (res) {
      expect(res.token).toBe(mockToken);
      expect(res.message).toBe(mockMessage);
      return null;
    });
  });
  it('ensures the request has the right headers', function () {
    expect.assertions(3);
    var mockToken = 'test-token';
    var mockMessage = 'Authentication successful';
    var user = {
      username: 'testuser',
      password: 'testpassword'
    };
    auth.saveAuthToken.mockImplementation(function (token) {
      return {
        token: token,
        message: mockMessage
      };
    });

    function mockConsume(endpoint, headers) {
      expect(headers.Accept).toBe('application/json');
      expect(headers['Content-Type']).toBe('application/json');
      return Promise.resolve({
        body: {
          token: mockToken
        }
      });
    }

    return (0, _request["default"])(_endpoints.signInUrl, user, mockConsume).then(function (res) {
      expect(res).toBeTruthy();
      return null;
    });
  });
  it('requires a data object', function () {
    expect.assertions(1); // in case the catch isn't reached
    // Intentionally not passing the 2nd parameter to request()

    return (0, _request["default"])(_endpoints.signInUrl).then(function () {
      return null;
      /* should not get here */
    })["catch"](function (err) {
      expect(err.message).toMatch('Data parameter is required');
    });
  });
  it('requires the data parameter have a username property', function () {
    expect.assertions(1); // in case the catch isn't reached
    // Intentionally passing an empty object as the 2nd parameter

    return (0, _request["default"])(_endpoints.signInUrl, {}).then(function () {
      return null;
      /* should not get here */
    })["catch"](function (err) {
      expect(err.message).toMatch('must have a username property');
    });
  });
});