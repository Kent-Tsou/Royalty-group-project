"use strict";

var _tokenStorage = require("./tokenStorage");

describe('saveToken', function () {
  it('saves the token to localStorage', function () {
    var token = 'test-token';
    var mockSetItem = jest.fn();
    var mockLocalStorage = {
      setItem: mockSetItem
    };
    (0, _tokenStorage.saveToken)(token, mockLocalStorage);
    expect(mockSetItem.mock.calls[0][0]).toBe('token');
    expect(mockSetItem.mock.calls[0][1]).toBe(token);
  });
  it('removes the token from localStorage when token is falsy', function () {
    var mockRemoveItem = jest.fn();
    var mockLocalStorage = {
      removeItem: mockRemoveItem
    };
    (0, _tokenStorage.saveToken)(null, mockLocalStorage);
    (0, _tokenStorage.saveToken)(undefined, mockLocalStorage);
    expect(mockRemoveItem.mock.calls[0][0]).toBe(_tokenStorage.localStorageKeyName);
    expect(mockRemoveItem.mock.calls[1][0]).toBe(_tokenStorage.localStorageKeyName);
  });
});
describe('getToken', function () {
  it('returns the token from localStorage', function () {
    var mockGetItem = jest.fn(function (_) {
      return 'test-token';
    });
    var mockLocalStorage = {
      getItem: mockGetItem
    };
    (0, _tokenStorage.getToken)(mockLocalStorage);
    expect(mockGetItem.mock.calls[0][0]).toBe(_tokenStorage.localStorageKeyName);
    expect(mockGetItem.mock.results[0].value).toBe('test-token');
  });
});