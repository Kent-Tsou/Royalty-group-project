"use strict";

var express = require('express');

var hash = require('./hash');

var token = require('./token');

var _require = require('../endpoints'),
    registerUrl = _require.registerUrl,
    signInUrl = _require.signInUrl;

var DATABASE_ERROR = 'DATABASE_ERROR';
var INVALID_CREDENTIALS = 'INVALID_CREDENTIALS';
var USERNAME_UNAVAILABLE = 'USERNAME_UNAVAILABLE';
module.exports = {
  applyAuthRoutes: applyAuthRoutes
}; // TODO: Refactor this function

function applyAuthRoutes(router, functions) {
  var issueToken = token.getIssuer(functions.getUserByName);
  router.use(express.json());
  router.post(registerUrl, register, issueToken);
  router.post(signInUrl, signIn, issueToken);

  function register(req, res, next) {
    functions.userExists(req.body.username).then(function (exists) {
      if (exists) {
        return res.status(400).json({
          errorType: USERNAME_UNAVAILABLE
        });
      } // eslint-disable-next-line


      return functions.createUser(req.body).then(function () {
        return next();
      });
    })["catch"](function (err) {
      res.status(500).json({
        errorType: DATABASE_ERROR,
        error: err.message
      });
    });
  }

  function signIn(req, res, next) {
    functions.getUserByName(req.body.username).then(function (user) {
      if (user) return user;
      throw new Error(INVALID_CREDENTIALS);
    }).then(function (user) {
      return user && hash.verify(user.hash, req.body.password);
    }).then(function (isValid) {
      // eslint-disable-next-line promise/no-callback-in-promise
      if (isValid) return next();
      throw new Error(INVALID_CREDENTIALS);
    })["catch"](function (err) {
      if (err.message === INVALID_CREDENTIALS) {
        return res.status(400).json({
          errorType: INVALID_CREDENTIALS
        });
      }

      res.status(500).json({
        errorType: DATABASE_ERROR,
        error: err.message
      });
    });
  }
}