"use strict";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var jwt = require('jsonwebtoken');

var verifyJwt = require('express-jwt');

var testSecret = 'this-is-a-test-secret';
module.exports = {
  decode: decode,
  getIssuer: getIssuer,
  createToken: createToken,
  getTokenDecoder: getTokenDecoder
};

function getIssuer(getUserByName) {
  if (!process.env.JWT_SECRET) throw new Error('Authenticare needs a JWT_SECRET environment variable.  Add it to your .env file or wherever you keep your environment variables.');
  return function (req, res) {
    return getUserByName(req.body.username).then(function (user) {
      var token = createToken(user, process.env.JWT_SECRET, process.env.JWT_EXPIRE_TIME);
      res.json({
        message: 'Authentication successful.',
        token: token
      });
      return null;
    });
  };
}

function getTokenDecoder() {
  var throwNoTokenError = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
  return function (req, res, next) {
    verifyJwt({
      secret: getSecret,
      algorithms: ['HS256'],
      credentialsRequired: throwNoTokenError
    })(req, res, next);
  };
}

function decode(req, res, next) {
  // eslint-disable-next-line no-console
  console.warn('authenticare/server:', 'decodeToken has been deprecated and will be removed in v0.5.0.', 'Recommend using getTokenDecoder instead. See docs for use.');
  verifyJwt({
    secret: getSecret
  })(req, res, next);
}

function createToken(user, secret, expireTime) {
  var token = _objectSpread({}, user);

  delete token.hash;
  return jwt.sign(token, secret, {
    expiresIn: expireTime || '1d'
  });
}

function getSecret(req, payload, done) {
  var secret = process.env.JWT_SECRET || testSecret;

  if (secret === testSecret) {// eslint-disable-next-line no-console
    // console.warn('ATTENTION: Using the JWT Test secret')
  }

  done(null, secret);
}