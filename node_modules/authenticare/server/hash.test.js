"use strict";

var hash = require('./hash');

beforeEach(function () {
  return jest.resetModules();
});
describe('hash.generate', function () {
  it('returns an argon v2 hash from the clear text password', function () {
    // just the beginning of the expected resulting hash
    var expected = '$argon2id$v=19$m=65536,t=2,p=1';
    return hash.generate('test-password').then(function (actual) {
      expect(actual).toMatch(expected);
      return null;
    });
  });
});
describe('hash.verify', function () {
  it('returns true when given a valid hash and correct password', function () {
    var password = 'test-password';
    var passwordHash = '$argon2id$v=19$m=65536,t=2,p=1$vyDA85ZGWn7Vk1fC/hejHg$2YGy8S5RFq0FsQbNMp+kizzh0I4blb9ywW+AoJ3SbKQ';
    return hash.verify(passwordHash, password).then(function (result) {
      expect(result).toBeTruthy();
      return null;
    });
  });
  it('returns false when given an invalid hash', function () {
    var password = 'test-password';
    var passwordHash = '$argon2id$v=19$m=65536,t=2,p=1$vyDA85zGWn7Vk1FC/hejHG$2YGy8s5RFq0FsQbNMp+kizzh0I4blb9ywW+AoJ3SbKQ'; // the case of some characters have been changed

    return hash.verify(passwordHash, password).then(function (result) {
      expect(result).toBeFalsy();
      return null;
    });
  });
  it('returns false when given an incorrect password', function () {
    var password = 'bad-password';
    var passwordHash = '$argon2id$v=19$m=65536,t=2,p=1$vyDA85ZGWn7Vk1fC/hejHg$2YGy8S5RFq0FsQbNMp+kizzh0I4blb9ywW+AoJ3SbKQ';
    return hash.verify(passwordHash, password).then(function (result) {
      expect(result).toBeFalsy();
      return null;
    });
  });
});